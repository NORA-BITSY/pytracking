#!/usr/bin/env python3
"""
Setup Script for Complete PyTracking Email Tracking System
=========================================================

This script sets up the complete email tracking system with all dependencies,
database initialization, and sample data.

Usage:
    python setup.py
    python setup.py --full-install  # Install all optional dependencies
    python setup.py --reset-db      # Reset database and recreate sample data
"""

import argparse
import os
import subprocess
import sys
from pathlib import Path

def run_command(command, description):
    """Run a shell command and handle errors"""
    print(f"üì¶ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        if result.stdout:
            print(f"   ‚úÖ {result.stdout.strip()}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"   ‚ùå Error: {e.stderr.strip()}")
        return False

def check_python_version():
    """Check if Python version is compatible"""
    if sys.version_info < (3, 6):
        print("‚ùå Python 3.6+ is required")
        sys.exit(1)
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro} detected")

def install_dependencies(full_install=False):
    """Install required dependencies"""
    print("üîß Installing dependencies...")
    
    # Basic requirements
    basic_deps = [
        "pytracking[all]",
        "flask",
        "flask-sqlalchemy",
        "requests",
        "cryptography"
    ]
    
    # Full installation with optional dependencies
    full_deps = basic_deps + [
        "matplotlib",
        "plotly",
        "pandas",
        "gunicorn",
        "psycopg2-binary",  # PostgreSQL support
        "pymysql",          # MySQL support
        "redis",            # Redis support for caching
        "celery",           # Background tasks
        "pytest",           # Testing
        "black",            # Code formatting
        "flake8"            # Linting
    ]
    
    deps = full_deps if full_install else basic_deps
    
    for dep in deps:
        if not run_command(f"pip install {dep}", f"Installing {dep}"):
            print(f"‚ö†Ô∏è  Warning: Failed to install {dep}")
    
    print("‚úÖ Dependencies installation completed")

def create_directory_structure():
    """Create necessary directories"""
    directories = [
        "templates",
        "static/css",
        "static/js",
        "static/images",
        "logs",
        "exports",
        "uploads"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"üìÅ Created directory: {directory}")

def generate_secret_key():
    """Generate a secure secret key"""
    import secrets
    return secrets.token_hex(32)

def create_env_file():
    """Create .env file with configuration"""
    env_content = f"""# PyTracking Email Tracking System Configuration
# Generated by setup.py

# Flask Configuration
SECRET_KEY={generate_secret_key()}
FLASK_ENV=development
FLASK_DEBUG=True

# Database Configuration
DATABASE_URL=sqlite:///email_tracking.db

# Tracking Configuration
BASE_OPEN_TRACKING_URL=http://localhost:5000/track/open/
BASE_CLICK_TRACKING_URL=http://localhost:5000/track/click/
WEBHOOK_URL=http://localhost:5000/webhook/tracking

# Security
ENCRYPTION_KEY={generate_secret_key()}

# Email Service Provider (configure as needed)
# SENDGRID_API_KEY=your_sendgrid_api_key
# MAILGUN_API_KEY=your_mailgun_api_key
# MAILGUN_DOMAIN=your_mailgun_domain
# AWS_ACCESS_KEY_ID=your_aws_access_key
# AWS_SECRET_ACCESS_KEY=your_aws_secret_key

# Redis (for caching and background tasks)
# REDIS_URL=redis://localhost:6379/0

# Production settings
# DATABASE_URL=postgresql://user:password@localhost/tracking_prod
# FLASK_ENV=production
# FLASK_DEBUG=False
"""
    
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print("‚úÖ Created .env configuration file")

def create_requirements_file():
    """Create requirements.txt file"""
    requirements = """# Core dependencies
pytracking[all]>=0.2.3
flask>=2.0.0
flask-sqlalchemy>=2.5.1
sqlalchemy>=1.4.0
requests>=2.25.0
cryptography>=3.4.0

# Optional dependencies for full functionality
matplotlib>=3.5.0
plotly>=5.0.0
pandas>=1.3.0

# Production server
gunicorn>=20.1.0

# Database drivers
psycopg2-binary>=2.9.0  # PostgreSQL
pymysql>=1.0.0          # MySQL

# Caching and background tasks
redis>=4.0.0
celery>=5.2.0

# Development and testing
pytest>=6.2.0
pytest-flask>=1.2.0
black>=21.0.0
flake8>=3.9.0

# Monitoring and logging
python-dotenv>=0.19.0
"""
    
    with open('requirements.txt', 'w') as f:
        f.write(requirements)
    
    print("‚úÖ Created requirements.txt file")

def create_docker_files():
    """Create Docker configuration files"""
    
    # Dockerfile
    dockerfile = """FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \\
    gcc \\
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Create necessary directories
RUN mkdir -p logs exports uploads

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\
    CMD curl -f http://localhost:5000/ || exit 1

# Run application
CMD ["gunicorn", "--bind", "0.0.0.0:5000", "--workers", "4", "complete_tracking_system:app"]
"""
    
    with open('Dockerfile', 'w') as f:
        f.write(dockerfile)
    
    # docker-compose.yml
    compose = """version: '3.8'

services:
  web:
    build: .
    ports:
      - "5000:5000"
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/tracking
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
    volumes:
      - ./logs:/app/logs
      - ./exports:/app/exports
  
  db:
    image: postgres:13
    environment:
      - POSTGRES_DB=tracking
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
  
  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
  
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - web

volumes:
  postgres_data:
"""
    
    with open('docker-compose.yml', 'w') as f:
        f.write(compose)
    
    # nginx.conf
    nginx_conf = """events {
    worker_connections 1024;
}

http {
    upstream app {
        server web:5000;
    }
    
    server {
        listen 80;
        server_name localhost;
        
        location / {
            proxy_pass http://app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\\n";
            add_header Content-Type text/plain;
        }
    }
}
"""
    
    with open('nginx.conf', 'w') as f:
        f.write(nginx_conf)
    
    print("‚úÖ Created Docker configuration files")

def create_systemd_service():
    """Create systemd service file for production deployment"""
    service_content = f"""[Unit]
Description=PyTracking Email Tracking System
After=network.target

[Service]
Type=exec
User=www-data
Group=www-data
WorkingDirectory={os.getcwd()}
Environment=PATH={os.getcwd()}/venv/bin
ExecStart={os.getcwd()}/venv/bin/gunicorn --bind 0.0.0.0:5000 --workers 4 complete_tracking_system:app
ExecReload=/bin/kill -s HUP $MAINPID
Restart=always
RestartSec=3

[Install]
WantedBy=multi-user.target
"""
    
    with open('pytracking.service', 'w') as f:
        f.write(service_content)
    
    print("‚úÖ Created systemd service file (pytracking.service)")
    print("   To install: sudo cp pytracking.service /etc/systemd/system/")
    print("   To enable: sudo systemctl enable pytracking")
    print("   To start: sudo systemctl start pytracking")

def initialize_database():
    """Initialize the database"""
    print("üóÑÔ∏è  Initializing database...")
    
    try:
        # Import and run the app to create tables
        from complete_tracking_system import app, db
        
        with app.app_context():
            db.create_all()
            print("‚úÖ Database tables created")
            
            # Create sample data
            from complete_tracking_system import create_sample_data
            create_sample_data()
            print("‚úÖ Sample data created")
            
    except ImportError as e:
        print(f"‚ö†Ô∏è  Could not initialize database automatically: {e}")
        print("   Run 'python complete_tracking_system.py' to initialize manually")

def run_tests():
    """Run basic system tests"""
    print("üß™ Running basic tests...")
    
    try:
        from tracking_cli import TrackingCLI
        
        cli = TrackingCLI()
        
        # Test configuration
        cli.show_config()
        
        # Test URL generation
        pixel_url = cli.generate_open_tracking_pixel(1, {"test": True})
        link_url = cli.generate_click_tracking_link("https://example.com", 1, {"test": True})
        
        print("‚úÖ Basic functionality tests passed")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Test warning: {e}")

def print_next_steps():
    """Print instructions for next steps"""
    print("\n" + "="*60)
    print("üéâ Setup completed successfully!")
    print("="*60)
    print("\nüìã Next steps:")
    print("1. Start the application:")
    print("   python complete_tracking_system.py")
    print("\n2. Open your browser:")
    print("   http://localhost:5000")
    print("\n3. Try the CLI tool:")
    print("   python tracking_cli.py --help")
    print("   python tracking_cli.py test")
    print("\n4. For production deployment:")
    print("   - Edit .env file with your configuration")
    print("   - Set up your email service provider")
    print("   - Configure database (PostgreSQL/MySQL)")
    print("   - Use Docker or systemd service")
    print("\nüìö Documentation:")
    print("   - README.md for complete documentation")
    print("   - complete_tracking_system.py for web interface")
    print("   - tracking_cli.py for command-line usage")
    print("\nüîß Configuration files created:")
    print("   - .env (environment variables)")
    print("   - requirements.txt (dependencies)")
    print("   - Dockerfile & docker-compose.yml (Docker)")
    print("   - pytracking.service (systemd)")
    print("   - nginx.conf (reverse proxy)")

def main():
    parser = argparse.ArgumentParser(description="Setup PyTracking Email Tracking System")
    parser.add_argument('--full-install', action='store_true', 
                       help='Install all optional dependencies')
    parser.add_argument('--reset-db', action='store_true',
                       help='Reset database and recreate sample data')
    parser.add_argument('--skip-install', action='store_true',
                       help='Skip dependency installation')
    parser.add_argument('--docker-only', action='store_true',
                       help='Only create Docker configuration files')
    
    args = parser.parse_args()
    
    print("üöÄ PyTracking Email Tracking System Setup")
    print("="*50)
    
    if args.docker_only:
        create_docker_files()
        print("‚úÖ Docker files created. Run 'docker-compose up' to start.")
        return
    
    # Basic setup steps
    check_python_version()
    create_directory_structure()
    create_env_file()
    create_requirements_file()
    create_docker_files()
    create_systemd_service()
    
    if not args.skip_install:
        install_dependencies(args.full_install)
    
    if args.reset_db or not Path('email_tracking.db').exists():
        initialize_database()
    
    run_tests()
    print_next_steps()

if __name__ == '__main__':
    main()
